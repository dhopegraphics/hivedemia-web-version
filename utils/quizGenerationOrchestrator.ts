import { Alert } from "react-native";
import {
  estimateProcessingTime,
  formatErrorGuidance,
  getAIErrorGuidance,
} from "./aiErrorGuidanceUtils";
import {
  generateQuizWithAIAndFallback,
  QuizGenerationSettings,
} from "./aiResponseUtils";
import { estimateTextTokens } from "./fileChunkingUtils";
import {
  createQuizInDatabase,
  generateQuizPrompt,
  QuizCreationData,
  validateQuizInput,
} from "./quizDatabaseUtils";
import {
  showQuizLimitAlert,
  SubscriptionStatus,
  updateQuotaAfterGeneration,
  validateQuizGeneration,
} from "./quizValidationUtils";

export interface QuizGenerationResult {
  success: boolean;
  quizId?: string;
  error?: string;
}

export interface QuizGenerationCallbacks {
  onProgress?: (message: string) => void;
  onSuccess?: (quizId: string) => void;
  onError?: (error: string) => void;
  onValidationFailed?: (reason: string, shouldShowUpgrade: boolean) => void;
  refreshQuota?: () => void;
}

/**
 * Main orchestrator function for quiz generation
 * Handles validation, AI generation, database storage, and quota management
 */
export const generateQuizComplete = async (
  userId: string,
  settings: QuizGenerationSettings,
  subscriptionStatus: SubscriptionStatus,
  callbacks: QuizGenerationCallbacks = {}
): Promise<QuizGenerationResult> => {
  const { onProgress, onSuccess, onError, onValidationFailed, refreshQuota } =
    callbacks;

  try {
    // Step 1: Validate subscription and quota
    onProgress?.("Validating subscription...");
    const validationResult = await validateQuizGeneration(subscriptionStatus);

    if (!validationResult.canGenerate) {
      onValidationFailed?.(
        validationResult.reason || "Cannot generate quiz",
        validationResult.shouldShowUpgrade || false
      );
      return {
        success: false,
        error: validationResult.reason,
      };
    }

    // Step 2: Validate input data
    const { selectedFiles, selectedLecturerFiles, customPrompt } = settings;
    const inputValidation = validateQuizInput(
      selectedFiles,
      selectedLecturerFiles,
      customPrompt
    );

    if (!inputValidation.isValid) {
      onError?.(inputValidation.error || "Invalid input");
      return {
        success: false,
        error: inputValidation.error,
      };
    }

    // Step 3: Analyze file sizes and provide feedback
    if (selectedFiles.length > 0 || selectedLecturerFiles.length > 0) {
      const allFiles = [...selectedFiles, ...selectedLecturerFiles];
      const largeFiles = allFiles.filter((file) => {
        const content = file.data || file.content || "";
        return estimateTextTokens(content) > 15000;
      });

      if (largeFiles.length > 0) {
        onProgress?.(
          `Large files detected (${largeFiles.length}). Applying intelligent content optimization...`
        );
      }
    }

    // Step 4: Show progress messages and time estimates
    if (selectedLecturerFiles.length > 0) {
      onProgress?.("Make Sure Lecturer File Contains Questions");
    }

    // Provide processing time estimate
    const timeEstimate = estimateProcessingTime(
      selectedFiles.length + selectedLecturerFiles.length,
      selectedFiles.some(
        (f) =>
          f.name.toLowerCase().includes("large") || (f as any).size > 5000000
      ), // 5MB threshold
      settings.questionCount
    );
    onProgress?.(timeEstimate.message);
    onProgress?.("Quiz Creation Has Begun");

    // Step 4: Generate quiz using AI with fallback support
    onProgress?.("Generating quiz questions...");
    const quizQuestions = await generateQuizWithAIAndFallback(
      settings,
      onProgress
    );

    if (!quizQuestions.length) {
      throw new Error("No questions generated by AI");
    }

    // Step 5: Create quiz data object
    const quizData: QuizCreationData = {
      userId,
      prompt: generateQuizPrompt(
        selectedFiles,
        selectedLecturerFiles,
        customPrompt
      ),
      feedbackMode: settings.feedbackMode,
      questionCount: settings.questionCount,
      difficulty: settings.difficulty,
      questionTypes: JSON.stringify(settings.questionTypes),
    };

    // Step 6: Save to database
    onProgress?.("Saving quiz to database...");
    const dbResult = await createQuizInDatabase(quizData, quizQuestions);

    if (!dbResult.success) {
      throw new Error(dbResult.error || "Failed to save quiz");
    }

    // Step 7: Update quota tracking ONLY after successful creation
    onProgress?.("Updating quota...");
    await updateQuotaAfterGeneration(subscriptionStatus);

    // Step 8: Refresh quota in UI
    refreshQuota?.();

    // Step 9: Call success callback
    onSuccess?.(dbResult.quizId);
    onProgress?.("Quiz Generated Successfully!");

    return {
      success: true,
      quizId: dbResult.quizId,
    };
  } catch (error) {
    console.error("Quiz generation error:", error);

    // Get user-friendly error guidance
    const guidance = getAIErrorGuidance(error);
    const userFriendlyMessage = formatErrorGuidance(guidance);

    onError?.(userFriendlyMessage);

    return {
      success: false,
      error: userFriendlyMessage,
    };
  }
};

/**
 * Simplified wrapper for quiz generation with standard error handling
 */
export const generateQuizWithStandardHandling = async (
  userId: string,
  settings: QuizGenerationSettings,
  subscriptionStatus: SubscriptionStatus,
  callbacks: {
    onProgress: (message: string) => void;
    onSuccess: (quizId: string) => void;
    onNavigateToUpgrade: () => void;
    refreshQuota?: () => void;
  }
): Promise<void> => {
  const result = await generateQuizComplete(
    userId,
    settings,
    subscriptionStatus,
    {
      onProgress: callbacks.onProgress,
      onSuccess: callbacks.onSuccess,
      refreshQuota: callbacks.refreshQuota,
      onValidationFailed: (reason, shouldShowUpgrade) => {
        showQuizLimitAlert(
          reason,
          shouldShowUpgrade,
          callbacks.onNavigateToUpgrade
        );
      },
      onError: (error) => {
        Alert.alert("Error", error);
      },
    }
  );

  if (!result.success && result.error) {
    // Additional error handling if needed
    console.error("Quiz generation failed:", result.error);
  }
};
